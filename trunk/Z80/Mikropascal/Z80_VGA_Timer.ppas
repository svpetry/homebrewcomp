program Z80_VGA_Timer;

(*
 * VGA signal generator
 * Clock: 50 MHz ext. = 12.5 MHz int.
 *
 * Resolution: 640 x 400
 *
 * pin layout:
 * RA0: H_VISIBLE: visible area of row (active = 1)
 * RA1: /CLR_CNT: reset row counter
 * RA2: /V_SYNC: /vertical synchronization
 * RA3: /H_SYNC: /horizontal syncronization
 * RA4: /VRAM_BUSY: to the CPU: memory access follows! (active= 0)
 * RA5: WR_CHARRAM: 1 = write character RAM, 0 = normal operation
 * RA6: CNT_CLK
 * RA7: connected to crystal oscillator
 * RB0-RB7, RE0: row counter (0-399), RB0-RB3: A0-A3 of character RAM
 * RC0-RC7: A4-A11 of character RAM
 * RD0-RD7: D0-D7 of character RAM
 * RE1: /EN_RAMACCESS
 * RE3: GRFX_MODE
 *)
 
uses Characters;

var
  line: integer;
  data_line: byte;

  next_porta: byte;
  next_portb: byte;
  next_trisb: byte;
  next_porte: byte;
  next_trise: byte;
  
  gmode, gm: byte;

(******************************************************************************)
procedure Init;
begin
//  OSCCON := %01110000;

  ADCON0 := 0; // disable A/D Converter
  ADCON1 := $0f;
  CMCON := $07; // disable comparator

  INTCON := 0;
  PIE1 := 0;
  PIE2 := 0;
  RCON := 0;
  CCP1CON := 0;
  ECCP1CON := 0;
  SSPCON1 := 0;
  SSPCON2 := 0;
  T0CON := 0;

  TRISA := 0;
  PORTA := %00011110;
  TRISB := 0;
  PORTB := 0;
  TRISC := 255;
  PORTC := 0;
  TRISD := 255;
  PORTD := 0;
  TRISE := %00001000;
  PORTE := %00000010;

end;
(******************************************************************************)
procedure FillCharRam;
var
  char: byte;
  line: byte;
  
begin
  LATA.5 := 1;
  TRISC := 0;
  TRISD := 0;
  PORTB := 15;

  PORTC := 0; // The caracter's ASCII code is on PORTC (A4-A11 of character RAM)

  // caracter 0-127
  for char := 0 to 127 do
  begin
    for line := 0 to 15 do
    begin
      PORTD := char_data[char][line];
      PORTB := line;
    end;
    inc(PORTC);
  end;
  
  // character 128-255
  for char := 0 to 127 do
  begin
    for line := 0 to 15 do
    begin
      PORTD := not char_data[char][line];
      PORTB := line;
    end;
    inc(PORTC);
  end;

  TRISC := 255;
  TRISD := 255;
  LATA.5 := 0;

  gm := 0;
end;
(******************************************************************************)
procedure FillCharRamGrfx;
var
  char: byte;
  line: byte;
  data: byte;

begin
  LATA.5 := 1;
  TRISC := 0;
  TRISD := 0;
  PORTB := 15;

  PORTC := 0; // The caracter's ASCII code is on PORTC (A4-A11 of character RAM)

  for char := 0 to 255 do
  begin
    for line := 0 to 15 do
    begin
      data := 0;
      case line div 4 of
        0: begin
          if char.1 = 1 then
            data := 15;
          if char.0 = 1 then
            data := data + 240;
        end;
        1: begin
          if char.3 = 1 then
            data := 15;
          if char.2 = 1 then
            data := data + 240;
        end;
        2: begin
          if char.5 = 1 then
            data := 15;
          if char.4 = 1 then
            data := data + 240;
        end;
        3: begin
          if char.7 = 1 then
            data := 15;
          if char.6 = 1 then
            data := data + 240;
        end;
      end;
      PORTD := data;
      PORTB := line;
    end;
    inc(PORTC);
  end;

  TRISC := 255;
  TRISD := 255;
  LATA.5 := 0;
  
  gm := 8;
end;
(******************************************************************************)
procedure MainLoop;
begin
  next_porta := %00000110;
  next_portb := 0;
  next_trisb := 0;
  next_porte := 0;
  next_trise := %00001000;
  data_line := 0;
  line := 0;

  if gm > 0 then
    next_porte.2 := 1
  else
    next_porte.2 := 0;

  asm
loop:
    MOVF   _next_porta, 0 // 1 pixel less further down!
    // 48 Pixel vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
    MOVWF  LATA // turn on hsync etc.
    MOVLW  9 // (%00001001) PORTE.0 = input
    MOVWF  TRISE
    BCF    LATE, 1 // /EN_RAMACCESS, results in execution of waiting write access
    BSF    LATA, 4 // CPU can access memory again (unlock waiting CPU)
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    // 48 Pixel ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    // 24 Pixel vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
    BSF    LATA, 3 // turn off hsync
    BSF    LATA, 6 // increment counter by 1 (offset of 74LS590)
    BCF    LATA, 6 //   - " -
    NOP
    NOP
    NOP
    NOP
    NOP
    BTFSC  _data_line, 0
    BCF    LATA, 4 // CPU must not access RAM! (/VRAM_BUSY)
    NOP
    BCF    _next_porte, 1
    BTFSC  _data_line, 0
    BSF    _next_porte, 1 // deny access of RAM if data_line = 1
    MOVF   _next_porte, 0
    MOVWF  LATE
    NOP
    MOVF   _next_trisb, 0
    MOVWF  TRISB
    MOVF   _next_trise, 0
    MOVWF  TRISE
    MOVF   _next_portb, 0
    MOVWF  LATB
    BTFSC  _data_line, 0
    // 24 Pixel ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    
    // 320 Pixel vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
    BSF    LATA, 0 // start of visible area

    // vvv block = 11 instructions
    // if line = 449 then
    MOVF   _line+1, 0, 0
    XORLW  1
    BNZ    else1a
    MOVLW  193
    XORWF  _line, 0, 0
    BNZ    else1b
    // line := 0
    CLRF   _line, 0
    CLRF   _line+1, 0
    BCF    _next_porta, 2 // start vsync
    BRA    end1
else1a:
    NOP
    NOP
    NOP
else1b:
    // inc(line)
    INFSNZ _line, 1, 0
    INCF	 _line+1, 1, 0
    NOP
    NOP
end1:

    // vvv block = 9 instructions
    // if line = 2 then (end of vsync)
    MOVF   _line+1, 0, 0
    XORLW  0
    BNZ    else2a
    MOVLW  2
    XORWF  _line, 0, 0
    BNZ    else2b
    BSF    _next_porta, 2 // end of vsync
    BRA    end2
else2a:
    NOP
    NOP
    NOP
else2b:
    NOP
    NOP
end2:

    // vvv block = 14 instructions
    // if line = 35 then (start of visible area)
    MOVF   _line+1, 0, 0
    XORLW  0
    BNZ    else3a
    MOVLW  35
    XORWF  _line, 0, 0
    BNZ    else3b
    BSF    _data_line, 0 // data_line := 1
    MOVLW  255
    MOVWF  _next_portb // set row counter to 255 (then it will be set to 0 further down)
    BSF    _next_porte, 0 // will be set to 0 further down because of BTG
    BCF    _next_trise, 0
    CLRF   _next_trisb
    BRA    end3
else3a:
    NOP
    NOP
    NOP
else3b:
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
end3:

    // vvv block = 13 instructions
    // if line = 435 then (end of visible area)
    MOVF   _line+1, 0, 0
    XORLW  1
    BNZ    else4a
    MOVLW  179
    XORWF  _line, 0, 0
    BNZ    else4b
    CLRF   _data_line, 0 // data_line := 0
    CLRF   _next_portb // PORTB := 0
    BSF    _next_trise, 0
    MOVLW  255
    MOVWF  _next_trisb
    BRA    end4
else4a:
    NOP
    NOP
    NOP
else4b:
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
end4:

    // vvv block = 7 instructions
    INCFSZ _next_portb, 1 // row counter := row counter + 1
    BRA    else5
    BTG    _next_porte, 0
else5:
    NOP
    NOP
    NOP
    NOP

{ // commented out. for 320x200 pixels only every second line was incremented
    BTFSS  _data_line, 0 // if data_line.0 = 1
    BRA    else5a
    BTFSS  _line, 0 // ... and _line.0 = 0
    BRA    else5b
    INCF   _next_portb, 1 // row counter := row counter + 1
    BRA    end5
else5a:
    NOP
    NOP
else5b:
    NOP
    NOP
end5:
}
    // 55 instructions until here
    
    MOVLW   51 // 1 instruction
wait_loop: // wait for 50 * 5 + 4 = 254 instructions
    NOP
    NOP
    DECFSZ WREG, 0
    BRA    wait_loop

    // 10 instructions
    MOVF   PORTE, 0, 0
    ANDLW  8
    XORWF  _gm, 0, 0
    BZ     weiter6
    BRA    exitloop
weiter6:
    NOP
    NOP
    NOP
    NOP
    NOP
    // 320 pixels ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    
    // 7 pixels (the 8. is on the very top) vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
    BCF    LATA, 0 // end of visible area
    BCF    LATA, 1 // clear counter
    BSF    LATA, 1 // clear counter
    MOVLW  255     // PORTB = input
    MOVWF  TRISB
    goto loop;
    // 7 pixels ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

exitloop:

  end;
end;
(******************************************************************************)
var
  i: word;

begin
  WREG := line;
  WREG := data_line;
  WREG := next_porta;
  WREG := next_portb;
  WREG := next_trisb;
  WREG := next_trise;
  WREG := next_porte;
  WREG := gmode;
  WREG := gm;
  
  Init;
  Delay_10us;

  while true do
  begin
    LATA := %00011100;
    LATE := %00000010;
    nop;
    LATA.1 := 1;
    LATB := 0;
    Delay_10us;

    gmode := PORTE.3 shl 3;

    if gmode > 0 then
    begin
      FillCharRamGrfx; // ca. 20 ms
    end
    else begin
      FillCharRam; // ca. 30 ms
    end;

    Delay_8ms;
    MainLoop;
  end;

end.
