unit MainBios;

 uses DiskIO, Memory, Keyboard, Fat16Dir;

 var
   fsize: word;
   ticks: dword;

 const
   BUSY_ADDR = $0044;

(******************************************************************************)
procedure ProcessPortWrite;
var
  dir_item: TFat16DirItem;
  value: byte;
  block_size: word;
  i: byte;

begin
  value := PORTB;

  case PORTD of
  
    // write disk command
    160: begin
      case value of

        // init mmc
        0: begin
          LATA.4 := 0;
          LATA.4 := 1;
          MemWrite(BUSY_ADDR, 1);
          InitMmc;
          MemWrite(BUSY_ADDR, 0);
         end;

        // read sector
        1: begin
          LATA.4 := 0;
          LATA.4 := 1;
          MemWrite(BUSY_ADDR, 1);
          if mmc_changed = 1 then
            InitMmc;
          ReadSector;
          MemWrite(BUSY_ADDR, 0);
        end;

        // write sector
        2: begin
          LATA.4 := 0;
          LATA.4 := 1;
          MemWrite(BUSY_ADDR, 1);
          if mmc_changed = 1 then
            InitMmc;
          WriteSector;
          MemWrite(BUSY_ADDR, 0);
        end;
        
        // read first dir entry
        10: begin
          LATA.4 := 0;
          LATA.4 := 1;
          MemWrite(BUSY_ADDR, 1);
          if mmc_changed = 1 then
            InitMmc;
          if FindFirst(dir_item) then
          begin
            Strcpy(bios_str, dir_item.FileName);
            WriteBiosParamDWord(dir_item.FileSize);
            WriteBiosOutparam(dir_item.FileAttr);
          end
          else
            bios_str[0] := 0;
          WriteBiosStr;
          MemWrite(BUSY_ADDR, 0);
        end;
        
        // read next dir entry
        11: begin
          LATA.4 := 0;
          LATA.4 := 1;
          MemWrite(BUSY_ADDR, 1);
          if FindNext(dir_item) then
          begin
            Strcpy(bios_str, dir_item.FileName);
            WriteBiosParamDWord(dir_item.FileSize);
            WriteBiosOutparam(dir_item.FileAttr);
          end
          else
            bios_str[0] := 0;
          WriteBiosStr;
          MemWrite(BUSY_ADDR, 0);
        end;
        
        // open file for reading
		    20: begin
          LATA.4 := 0;
          LATA.4 := 1;
          MemWrite(BUSY_ADDR, 1);
          if mmc_changed = 1 then
            InitMmc;
          ReadBiosStr;
//          Usart_Write_Text(bios_str);
//          Usart_Write_Text(#10+#13);
          if Mmc_Fat_Assign(bios_str, 0) = 1 then
          begin
            WriteBiosOutparam(1);
            Mmc_Fat_Reset(fsize);
            WriteBiosParamDWord(fsize);
          end
          else
            WriteBiosOutparam(0);
          MemWrite(BUSY_ADDR, 0);
		    end;
		    
		    // open file for writing (create new)
    		21: begin
          LATA.4 := 0;
          LATA.4 := 1;
          MemWrite(BUSY_ADDR, 1);
          if mmc_changed = 1 then
            InitMmc;
          ReadBiosStr;
          Usart_Write_Text(bios_str);
          Usart_Write_Text(#13+#10);
          disk_status := Mmc_Fat_Assign(bios_str, $A0);
          if disk_status = 1 then
            Mmc_Fat_Rewrite;
          MemWrite(BUSY_ADDR, 0);
    		end;
    		
    		// open file for writing (append)
    		22: begin
          LATA.4 := 0;
          LATA.4 := 1;
          MemWrite(BUSY_ADDR, 1);
          if mmc_changed = 1 then
            InitMmc;
          ReadBiosStr;
          Mmc_Fat_Assign(bios_str, $A0);
          Mmc_Fat_Append;
          MemWrite(BUSY_ADDR, 0);
        end;

        // close file
    		22: begin
          LATA.4 := 0;
          LATA.4 := 1;
    		end;

        // read block
    		23: begin
          LATA.4 := 0;
          LATA.4 := 1;
          MemWrite(BUSY_ADDR, 1);
          ReadFile(fsize);
          MemWrite(BUSY_ADDR, 0);
    		end;

        // write block
    		24: begin
          LATA.4 := 0;
          LATA.4 := 1;
          MemWrite(BUSY_ADDR, 1);
          block_size := MemReadW(BIOS_PARAM1_ADDR_LO);
          Usart_Write_Text('Block size: ');
          Usart_Write_NumW(block_size);
          WriteFile(block_size);
          MemWrite(BUSY_ADDR, 0);
    		end;

        // load complete file into memory
    		25: begin
          LATA.4 := 0;
          LATA.4 := 1;
          MemWrite(BUSY_ADDR, 1);
          if mmc_changed = 1 then
            InitMmc;
          ReadBiosStr;

          MemWrite(BUSY_ADDR, 0);
    		end;
    		
        // read volume name
    		26: begin
          LATA.4 := 0;
          LATA.4 := 1;
          MemWrite(BUSY_ADDR, 1);
          if mmc_changed = 1 then
            InitMmc;
          ReadVolumeName;
          WriteBiosStr;
          MemWrite(BUSY_ADDR, 0);
    		end;

        // load program
    		27: begin
          LATA.4 := 0;
          LATA.4 := 1;
          if mmc_changed = 1 then
            InitMmc;
          ReadBiosStr;
          LoadProgram(bios_str);
    		end;

        // delete file
    		28: begin
          LATA.4 := 0;
          LATA.4 := 1;
          MemWrite(BUSY_ADDR, 1);
          if mmc_changed = 1 then
            InitMmc;
          ReadBiosStr;
          if Mmc_Fat_Assign(bios_str, 0) = 1 then
          begin
            WriteBiosOutparam(1);
            Mmc_Fat_Delete;
          end
          else
            WriteBiosOutparam(0);
          MemWrite(BUSY_ADDR, 0);
    		end;

        // check if file exists
    		29: begin
          LATA.4 := 0;
          LATA.4 := 1;
          MemWrite(BUSY_ADDR, 1);
          if mmc_changed = 1 then
            InitMmc;
          ReadBiosStr;
          WriteBiosOutparam(Mmc_Fat_Assign(bios_str, 0));
          MemWrite(BUSY_ADDR, 0);
    		end

    		else begin
          LATA.4 := 0;
          LATA.4 := 1;
    		end;

      end; // case value of
    end; // 160
    
    // init RS2332
    170: begin
      LATA.4 := 0;
      LATA.4 := 1;
      case value of
         0: Usart_Init(4800);
         1: Usart_Init(9600);
         2: Usart_Init(19200);
         3: Usart_Init(38400);
      end;
    end; // 170
    
    // write byte to RS232
    171: begin
      LATA.4 := 0;
      LATA.4 := 1;
      Usart_Write(value);
    end; // 171
    
    // write text to RS232
    172: begin
      ReadBiosStr;
      Usart_Write_Text(bios_str);
      LATA.4 := 0;
      LATA.4 := 1;
    end // 172
    
		else begin
      LATA.4 := 0;
      LATA.4 := 1;
		end;
  end; // case PORTD of
end;
(******************************************************************************)
procedure ProcessPortRead;
var
  data: byte;
  
begin
  data := 0;

  case PORTD of
  
    // read keyboard
    128: begin
      KeybGetChar(data);
    end;
    
    // read timer ticks (b0)
    130: begin
      data := Lo(ticks);
    end;

    // read timer ticks (b1)
    131: begin
      data := Hi(ticks);
    end;

    // read timer ticks (b2)
    132: begin
      data := Higher(ticks);
    end;

    // read timer ticks (b3)
    133: begin
      data := Highest(ticks);
    end;

    // read disk status
    161: begin
      data := disk_status;
    end;
    
    // read byte from file
    163: begin
      Mmc_Fat_Read(data);
    end;

    // read byte from RS232
    173: begin
      data := Usart_Read;
    end;

    // read RS232 status
    174: begin
      data := Usart_Data_Ready;
    end;
    
  end;

  TRISB := 0;
  PORTB := data;
  LATA.4 := 0;
  TRISB := 255;
  LATA.4 := 1;
end;
(******************************************************************************)
procedure MainLoop;
begin
  while true do
  begin
    if PORTE.2 = 1 then
      ProcessPortWrite
    else if PORTE.3 = 1 then
      ProcessPortRead;
  end;
end;
(******************************************************************************)
end.