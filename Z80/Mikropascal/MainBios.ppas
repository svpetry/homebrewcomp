unit MainBios;

uses DiskIO, Memory, Keyboard, Fat16Dir, Serial;

const
  BUSY_ADDR = $0044;

var
  fsize: word;
  ticks: dword;

(******************************************************************************)
procedure ProcessPortWrite;
var
  dir_item: TFat16DirItem;
  value: byte;
  block_size: word;
  brg_value: word;

begin
  value := PORTB;

  case PORTD of
  
    // write disk command
    160: begin
      case value of

        // init mmc
        0: begin
          LATA.4 := 0;
          LATA.4 := 1;
          MemWrite(BUSY_ADDR, 1);
          InitMmc();
          MemWrite(BUSY_ADDR, 0);
         end;

        // read sector
        1: begin
          LATA.4 := 0;
          LATA.4 := 1;
          MemWrite(BUSY_ADDR, 1);
          if mmc_changed = 1 then
            InitMmc();
          ReadSector;
          MemWrite(BUSY_ADDR, 0);
        end;

        // write sector
        2: begin
          LATA.4 := 0;
          LATA.4 := 1;
          MemWrite(BUSY_ADDR, 1);
          if mmc_changed = 1 then
            InitMmc();
          WriteSector();
          MemWrite(BUSY_ADDR, 0);
        end;
        
        // read first dir entry
        10: begin
          LATA.4 := 0;
          LATA.4 := 1;
          MemWrite(BUSY_ADDR, 1);
          if mmc_changed = 1 then
            InitMmc();
          if FindFirst(dir_item) then
          begin
            Strcpy(bios_str, dir_item.FileName);
            WriteBiosParamDWord(dir_item.FileSize);
            WriteBiosOutparam(dir_item.FileAttr);
          end
          else
            bios_str[0] := 0;
          WriteBiosStr();
          MemWrite(BUSY_ADDR, 0);
        end;
        
        // read next dir entry
        11: begin
          LATA.4 := 0;
          LATA.4 := 1;
          MemWrite(BUSY_ADDR, 1);
          if FindNext(dir_item) then
          begin
            Strcpy(bios_str, dir_item.FileName);
            WriteBiosParamDWord(dir_item.FileSize);
            WriteBiosOutparam(dir_item.FileAttr);
          end
          else
            bios_str[0] := 0;
          WriteBiosStr();
          MemWrite(BUSY_ADDR, 0);
        end;
        
        // open file for reading
        20: begin
          LATA.4 := 0;
          LATA.4 := 1;
          MemWrite(BUSY_ADDR, 1);
          if mmc_changed = 1 then
            InitMmc();
          ReadBiosStr();
//          Usart_Write_Text(bios_str);
//          Usart_Write_Text(#10+#13);
          if Mmc_Fat_Assign(bios_str, 0) = 1 then
          begin
            WriteBiosOutparam(1);
            Mmc_Fat_Reset(fsize);
            WriteBiosParamDWord(fsize);
          end
          else
            WriteBiosOutparam(0);
          MemWrite(BUSY_ADDR, 0);
        end;
        
        // open file for writing (create new)
        21: begin
          LATA.4 := 0;
          LATA.4 := 1;
          MemWrite(BUSY_ADDR, 1);
          if mmc_changed = 1 then
            InitMmc();
          ReadBiosStr();
          //Usart_Write_Text(bios_str);
          //Usart_Write_Text(#13+#10);
          disk_status := Mmc_Fat_Assign(bios_str, $A0);
          if disk_status = 1 then
            Mmc_Fat_Rewrite();
          disk_status := 0;
          MemWrite(BUSY_ADDR, 0);
        end;
        
        // open file for writing (append)
        22: begin
          LATA.4 := 0;
          LATA.4 := 1;
          MemWrite(BUSY_ADDR, 1);
          if mmc_changed = 1 then
            InitMmc();
          ReadBiosStr();
          disk_status := Mmc_Fat_Assign(bios_str, $A0);
          if disk_status = 0 then
             Mmc_Fat_Append();
          MemWrite(BUSY_ADDR, 0);
        end;

{        // close file
        22: begin
          LATA.4 := 0;
          LATA.4 := 1;
        end;
}
        // read block
        23: begin
          LATA.4 := 0;
          LATA.4 := 1;
          MemWrite(BUSY_ADDR, 1);
          ReadFile(fsize);
          MemWrite(BUSY_ADDR, 0);
        end;

        // write block
        24: begin
          LATA.4 := 0;
          LATA.4 := 1;
          MemWrite(BUSY_ADDR, 1);
          block_size := MemReadW(BIOS_PARAM1_ADDR_LO);
          //Usart_Write_Text('Block size: ');
          //Usart_Write_NumW(block_size);
          WriteFile(block_size);
          MemWrite(BUSY_ADDR, 0);
        end;

        // load complete file into memory
        25: begin
          LATA.4 := 0;
          LATA.4 := 1;
          MemWrite(BUSY_ADDR, 1);
          if mmc_changed = 1 then
            InitMmc();
          ReadBiosStr();
          LoadFile(bios_str, MemReadW(BIOS_PARAM1_ADDR_LO));
          MemWrite(BUSY_ADDR, 0);
        end;
        
        // read volume name
        26: begin
          LATA.4 := 0;
          LATA.4 := 1;
          MemWrite(BUSY_ADDR, 1);
          if mmc_changed = 1 then
            InitMmc();
          ReadVolumeName();
          WriteBiosStr();
          MemWrite(BUSY_ADDR, 0);
        end;

        // load program
{        27: begin
          LATA.4 := 0;
          LATA.4 := 1;
          if mmc_changed = 1 then
            InitMmc();
          ReadBiosStr();
          LoadProgram(bios_str);
        end;
}
        // delete file
        28: begin
          LATA.4 := 0;
          LATA.4 := 1;
          MemWrite(BUSY_ADDR, 1);
          if mmc_changed = 1 then
            InitMmc();
          ReadBiosStr();
          if Mmc_Fat_Assign(bios_str, 0) = 1 then
          begin
            WriteBiosOutparam(1);
            Mmc_Fat_Delete();
          end
          else
            WriteBiosOutparam(0);
          MemWrite(BUSY_ADDR, 0);
        end;

        // check if file exists
        29: begin
          LATA.4 := 0;
          LATA.4 := 1;
          MemWrite(BUSY_ADDR, 1);
          if mmc_changed = 1 then
            InitMmc();
          ReadBiosStr();
          WriteBiosOutparam(Mmc_Fat_Assign(bios_str, 0));
          MemWrite(BUSY_ADDR, 0);
        end

        else begin
          LATA.4 := 0;
          LATA.4 := 1;
        end;

      end; // case value of
    end; // 160
    
    // init RS2332
    170: begin
      LATA.4 := 0;
      LATA.4 := 1;
      
      RCSTA := %00010000;
      TXSTA := %00100100;
      BAUDCON := %00000100;

      case value of
        1: brg_value := 13749; // 1200 baud
        2: brg_value := 6874; // 2400 baud
        3: brg_value := 3436; // 4800 baud
        4: brg_value := 1717; // 9600 baud
        5: brg_value := 858; // 19200 baud
        6: brg_value := 428; // 38400 baud
        7: brg_value := 290; // 56700 baud
        8: brg_value := 142; // 115200 baud
      end;
      
      SPBRGH := Hi(brg_value);
      SPBRG := Lo(brg_value);

      RCSTA.7 := 1; // enable serial port

      ser_ptr_in := 0;
      ser_ptr_out := 0;
      ser_data_size := 0;
    end; // 170
    
    // write byte to RS232
    171: begin
      LATA.4 := 0;
      LATA.4 := 1;
      Usart_Write(value);
    end; // 171
    
    // write text to RS232
    172: begin
      LATA.4 := 0;
      LATA.4 := 1;
      SerialWriteText();
    end // 172
    
    else begin
      LATA.4 := 0;
      LATA.4 := 1;
    end;
  end; // case PORTD of
end; // ProcessPortWrite
(******************************************************************************)
procedure ProcessPortRead;
var
  data: byte;
  
begin
  data := 0;

  case PORTD of
  
    // read keyboard
    128: begin
      KeybGetChar(data);
    end;
    
    // read keyboard scancode
    129: begin
      KeybGetScancode(data);
    end;

    // read timer ticks (b0)
    130: begin
      data := Lo(ticks);
    end;

    // read timer ticks (b1)
    131: begin
      data := Hi(ticks);
    end;

    // read timer ticks (b2)
    132: begin
      data := Higher(ticks);
    end;

    // read timer ticks (b3)
    133: begin
      data := Highest(ticks);
    end;

    // read disk status
    161: begin
      data := disk_status;
    end;
    
    // read byte from file
    163: begin
      Mmc_Fat_Read(data);
    end;

    // read byte from RS232
    173: begin
      if ser_data_size > 0 then
      begin
        data := ser_buffer[ser_ptr_out];
        inc(ser_ptr_out);
        if ser_ptr_out = SER_BUFF_SIZE then
          ser_ptr_out := 0;
        dec(ser_data_size);
      end; // if ser_data_size > 0 then
    end;

    // read RS232 status
    174: begin
      if ser_data_size > 0 then
        data := 1;
    end;
    
  end; // case PORTD of

  TRISB := 0;
  PORTB := data;
  LATA.4 := 0;
  TRISB := 255;
  LATA.4 := 1;
end; // ProcessPortRead
(******************************************************************************)
procedure MainLoop;
begin
  while true do
  begin
    if PORTE.2 = 1 then
      ProcessPortWrite
    else if PORTE.3 = 1 then
      ProcessPortRead;
  end;
end; // MainLoop
(******************************************************************************)
end.